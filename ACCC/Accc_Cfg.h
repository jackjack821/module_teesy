/********************* MODULE STRUCTURE DEFINITIONS *************************/
/********************** Automatically Generated File ************************/
/********************* Do not edit this file manually! **********************/
/** Generated On : 2014/11/26  18:22:02                                     */
/**           By : test                                                     */
/**        Using : Accc_Cfg.xls                                             */
/**         From : D:\HVACproject\NewDevelopmentMode\ACCC                   */
/**               (D = )                                                    */
/****************************************************************************/
/*****************************************************************************
* FILE DECLARATION
******************************************************************************/
#ifndef ACCC_CFG_H
#define ACCC_CFG_H
/*****************************************************************************
* HEADER-FILES (Only those that are needed in this file)
******************************************************************************/
/* System-headerfiles */
#include "General.h"


/*****************************************************************************
* MACROS and STRUCT
*
* In this section declare
* - all macros and structs used in the configuration head file and C file.
******************************************************************************/
#define ACC_u8ConstDisplacAc		(1)
#define ACC_u8VariableDisplacAc		(0)
#define ACC_u8ElectricAc				(0)
#define ACCC_nAcType ACC_u8ConstDisplacAc

#define ACC_u8ATC				(1)
#define ACC_u8ETC				(0)

#define ACCC_nATCorETC	ACC_u8ATC

#define ACCC_nWITH_ECON_MODE   			(0)
#define ACCC_nUSE_HI_PROHIBITION          		(1)    /**/
#define ACCC_nUSE_SI_PROHIBITION          		(0)    /**/
#define ACCC_nUSE_OAT_PROHIBITION                   (1)    /**/
#define ACCC_nUSE_ENGINE_PROHIBITION            (0)    /**/
#define ACCC_nUSE_MESSAGE_PROHIBITION            (0)    /**/
#define ACCC_nUSE_INTERVAL_OFF_PROHIBITION     (0)    /**/
#define ACCC_nUSE_ISTP_PROHIBITION     		(0)    /**/
#define ACCC_nTTOFF_WHILE_OATLOW			(1)
#define ACCC_nNo_Error    (0U)

/********************Variable Displac A/C AND Electric A/C special configure****************************/
#define ACCC_nWITH_EVAP_DELAY_OFFAC   	(1)
#define ACCC_nWITH_PRESSURE_SENSOR              (0)    /**/
#define ACCC_nWITH_PRESSURE_SWITCH              (0)
#define ACCC_nWITH_COOLING_VALVE			(1)


/********************Variable Displac Ac special configure****************************/
#define ACCC_nUSE_SHORT_GND_PROHIBITION  (1)    /**/
#define ACCC_nWITH_TORQUE_OUTPUT			(1)


/********************Electric Ac special configure****************************/
#define ACCC_nWITH_BATT_MANAGE			(0)
#define ACCC_nWITH_AC_DIAG_SIGNAL		(0)
#define ACCC_nOUTPUT_SPEED_TO_POWER		(1)
#define ACCC_nOUTPUT_SPEED_TO_PWM		(0)
#define ACCC_nHCU_LIMIT_EC_SPEED			(1)
#define ACCC_nTargetEvapByBlowoutTbl_Len	(4U)
#define ACCC_nChillerBasicSpdTbl_Len    (2U)
#define ACCC_nBattCoolKi_Len    (4U)
#define ACCC_nEcBattBasedSpdByOat_Len    (4U)
#define ACCC_nEcPowerLimitSpd_Len    (9U)
#define ACCC_nEcPowerReq_Len    (8U)
#define ACCC_nEcPwmReq_Len    (2U)
#define ACCC_nTorquePressure_XLen	(10U)
#define ACCC_nTorqueEngineSpd_YLen	(9U)
#define ACCC_nCoolingCapacityToPhysics_Len    (2U)
#define ACCC_nKfTable_Len	(5U)
#define ACCC_nKpTable_Len	(5U)
#define ACCC_nKiTable_Len	(7U)


/*************************** Define Structures Arrary length ************************/

typedef const struct ACCC_stAcccInfo
{
   const uint8    u8VariableConst;
   const uint8    u8ModuleID;
   const uint16   u16ModuleLen;
} ACCC_tstAcccInfo;

/*************************** Group Structures ************************/
typedef const struct ACCC_stGroupACCC
{
   ACCC_tstAcccInfo  stAcccInfo;
   const uint8  u8AddChkSum;
   const uint8  u8XorChkSum;
} ACCC_tstGroupACCC;

/********************** LAYOUT STRUCTURE ****************************/
typedef const struct 
{
	//ACCC_tstGroupACCC  stGroupACCC;
	const uint16 u16WaitTime;
	const uint16 u16EvapTempDisable;
	const uint16 u16EvapTempEnable;
#if ACCC_nWITH_ECON_MODE
	const uint16 u16EvapTempDisableEcon;
	const uint16 u16EvapTempEnableEcon;
#endif
	const uint16 u16AmbTempDisable;
	const uint16 u16AmbTempEnable;
#if(ACCC_nUSE_ENGINE_PROHIBITION == True)
	const uint16 u16VehLowSpd;
	const uint16 u16EngLowSpd;
	const uint16 u16EngLowSpdHyst;
	const uint16 u16EngHighSpd;
	const uint16 u16EngHighSpdHyst;
#endif
#if(ACCC_nUSE_SI_PROHIBITION == True)
	const uint16 u16SiDisable;
	const uint16 u16SiEnable;
#endif
	
#if(ACCC_nWITH_PRESSURE_SENSOR == True)
	const uint16 u16LowPressureValue;
	const uint16 u16LowPressureHys;
	const uint16 u16HighPressureValue;
	const uint16 u16HighPressureHys;
#endif 
#if (ACCC_nWITH_PRESSURE_SWITCH == True)
	const uint16 u16PreHiOrLowValue;
#endif

#if((ACCC_nAcType == ACC_u8VariableDisplacAc) || (ACCC_nAcType == ACC_u8ElectricAc))
	const uint16 u16TargetEvapByDef;
	const uint16 u16TargetEvapGradientTime;	
	const uint16 u16TargetEvapGradientTemp;	
	const uint16 u16TargetEvapByOatOffsetFresh;
	const uint16 u16TargetEvapByOatOffsetRec;
	const uint16 u16InletTempHysForPidPara;
	const uint16 u16TargePhysicsIncGradient;
	const uint16 u16TargePhysicsDecGradient;
	const int16 i16EvapTempDiffMax;
	const int16 i16EvapTempDiffMin;
	const uint16 u16EvapTempDiffTol;
	const uint16 au16TargetEvapByBlowout_X[ACCC_nTargetEvapByBlowoutTbl_Len];
	const uint16 au16TargetEvapByBlowout_Y[ACCC_nTargetEvapByBlowoutTbl_Len];
#if ACCC_nWITH_EVAP_DELAY_OFFAC
	const uint16 u16EvapTempFreezingTemp ;    
	const uint16 u16EvapDelayAcOffTime;    
#endif
	const uint16 u16CalcDynEvapTime;
	const uint16 au16KfInletTemp_X[ACCC_nKfTable_Len];
	const uint16 au16KfTargetEvap_Y[ACCC_nKfTable_Len];
	const uint16 au16Kf_Z1[ACCC_nKfTable_Len][ACCC_nKfTable_Len];
	const uint16 au16Kf_Z2[ACCC_nKfTable_Len][ACCC_nKfTable_Len];
	const uint16 au16Kf_Z3[ACCC_nKfTable_Len][ACCC_nKfTable_Len];

	const uint16 au16KpInletTemp_X[ACCC_nKpTable_Len];
	const uint16 au16KpEvapErr_Y[ACCC_nKpTable_Len];
	const uint16 au16Kp_Z1[ACCC_nKpTable_Len][ACCC_nKpTable_Len];
	const uint16 au16Kp_Z2[ACCC_nKpTable_Len][ACCC_nKpTable_Len];
	const uint16 au16Kp_Z3[ACCC_nKpTable_Len][ACCC_nKpTable_Len];

	const uint16 au16KiDynEvap_X[ACCC_nKiTable_Len];
	const uint16 au16KiEvapErr_Y[ACCC_nKiTable_Len];
	const uint16 au16Ki_Z1[ACCC_nKiTable_Len][ACCC_nKiTable_Len];
	const uint16 au16Ki_Z2[ACCC_nKiTable_Len][ACCC_nKiTable_Len];
	const uint16 au16Ki_Z3[ACCC_nKiTable_Len][ACCC_nKiTable_Len];

	const uint16 u16CoolingCapacityCalcTime;
	const uint16 u16KpBaseConst;
	const uint16 u16KiBaseConst;
	const uint16 u16KdBaseConst;
	const uint16 au16CoolingCapacityToPhysics_X[ACCC_nCoolingCapacityToPhysics_Len];
	const uint16 au16CoolingCapacityToPhysics_Y[ACCC_nCoolingCapacityToPhysics_Len];

#endif
#if(ACCC_nAcType == ACC_u8VariableDisplacAc)	
	const uint16 u16VdcPwmPidCalcTime;

	const int16 i16VdcCurrDiffMax;
	const int16 i16VdcCurrDiffMin;
	const uint16 u16VdcPwmPidKp;
	const uint16 u16VdcPwmPidKi;
	const uint16 u16VdcPwmPidKd;
	const uint16 u16VdcMinPwm;
	const uint16 u16VdcMaxPwm;
#if(ACCC_nUSE_SHORT_GND_PROHIBITION == True)
	const uint16 u16VdcShortToGndRestoreTime;	
	const uint16 u16VdcShortToGndConfirmTime;	
	const uint16 u16VdcShortToGndRepeat;
#endif 
#if(ACCC_nWITH_TORQUE_OUTPUT)	
	const uint16 au16TorquePressure_X[ACCC_nTorquePressure_XLen];
	const uint16 au16TorqueEngineSpd_Y[ACCC_nTorqueEngineSpd_YLen];
	const uint16 au16Torque_Z[ACCC_nTorquePressure_XLen][ACCC_nTorqueEngineSpd_YLen];
#endif 
#endif 

#if(ACCC_nAcType == ACC_u8ElectricAc) 	
	const uint16 u16EcSpeedToCANFactor;

#if(ACCC_nHCU_LIMIT_EC_SPEED == True)
	const uint16 u16PowerLimitDisable;
	const uint16 u16HcuLimitEcSpd_X[ACCC_nEcPowerLimitSpd_Len];
	const uint16 u16HcuLimitEcSpd_Y[ACCC_nEcPowerLimitSpd_Len];
#endif
#if(ACCC_nOUTPUT_SPEED_TO_POWER)
	const uint16 u16EcPowerToCANFactor;
	const uint16 u16PowerReqOffset;
#endif
	const uint16 u16EcSpeedToOutput_X[ACCC_nEcPowerReq_Len];
	const uint16 u16EcSpeedToOutput_Y[ACCC_nEcPowerReq_Len];

#if(ACCC_nWITH_BATT_MANAGE == True)&&(ACCC_nAcType == ACC_u8ElectricAc) 	

	const uint16 u16CoolantInOffAcOffset;
	const uint16 u16CoolantInOnAcOffset;
	const uint16 u16TargetEvapByThermoOffset;
	const uint16 u16BattMinCoolingCapacity;
	const uint16 u16BattMaxCoolingCapacity;
	const uint16 u16ThreeWayValveRatioLvl1;
	const uint16 u16ThreeWayValveRatioLvl2;
	const uint16 u16SpdDecRateInLvl2;
	const uint16 u16BattTempDiffTol;
	const uint16 u16EcSpeedForBattKiTime;
	const uint16 au16BattCoolKi_X[ACCC_nBattCoolKi_Len];
	const uint16 au16BattCoolKi_Y[ACCC_nBattCoolKi_Len];
	const uint16 au16EcBattBasedSpdByOat_X[ACCC_nEcBattBasedSpdByOat_Len];
	const uint16 au16EcBattBasedSpdByOat_Y[ACCC_nEcBattBasedSpdByOat_Len];
#endif
#if(ACCC_nWITH_COOLING_VALVE == True)
	const uint16 u16TXVOffDelayTime;
#endif
#endif
} ACCC_tstLayout;

extern const ACCC_tstLayout ACCC_stRomLayout;
/********************* VARIABLE ACCESS MACROS ***************************/
#define   ACCC_u8VariableConst                    (ACCC_stRomLayout.stGroupACCC.stAcccInfo.u8VariableConst)
#define   ACCC_u8ModuleID                         (ACCC_stRomLayout.stGroupACCC.stAcccInfo.u8ModuleID)
#define   ACCC_u16ModuleLen                       (ACCC_stRomLayout.stGroupACCC.stAcccInfo.u16ModuleLen)

#define   ACCC_u16WaitTime					(ACCC_stRomLayout.u16WaitTime)
#define   ACCC_u16EvapTempDisable                (ACCC_stRomLayout.u16EvapTempDisable)    /**/
#define   ACCC_u16EvapTempEnable                 (ACCC_stRomLayout.u16EvapTempEnable)    /**/
#if ACCC_nWITH_ECON_MODE
#define   ACCC_u16EvapTempDisableEcon		(ACCC_stRomLayout.u16EvapTempDisableEcon)
#define   ACCC_u16EvapTempEnableEcon		(ACCC_stRomLayout.u16EvapTempEnableEcon)
#endif
#define   ACCC_u16AmbTempDisable                 (ACCC_stRomLayout.u16AmbTempDisable)    /**/
#define   ACCC_u16AmbTempEnable                  (ACCC_stRomLayout.u16AmbTempEnable)    /**/

#if(ACCC_nUSE_ENGINE_PROHIBITION == True)
#define   ACCC_u16VehLowSpd					(ACCC_stRomLayout.u16VehLowSpd)	
#define   ACCC_u16EngLowSpd					(ACCC_stRomLayout.u16EngLowSpd)
#define   ACCC_u16EngLowSpdHyst				(ACCC_stRomLayout.u16EngLowSpdHyst)
#define   ACCC_u16EngHighSpd				(ACCC_stRomLayout.u16EngHighSpd)
#define   ACCC_u16EngHighSpdHyst			(ACCC_stRomLayout.u16EngHighSpdHyst)
#endif

#if(ACCC_nUSE_SI_PROHIBITION == True)
#define   ACCC_u16SiDisable					(ACCC_stRomLayout.u16SiDisable)
#define   ACCC_u16SiEnable					(ACCC_stRomLayout.u16SiEnable)
#endif

#if(ACCC_nWITH_PRESSURE_SENSOR == True)
#define   ACCC_u16LowPressureValue               	(ACCC_stRomLayout.u16LowPressureValue)    /**/
#define   ACCC_u16LowPressureHys                 	(ACCC_stRomLayout.u16LowPressureHys)    /**/
#define   ACCC_u16HighPressureValue              	(ACCC_stRomLayout.u16HighPressureValue)    /**/
#define   ACCC_u16HighPressureHys                	(ACCC_stRomLayout.u16HighPressureHys)    /**/

#endif 

#if (ACCC_nWITH_PRESSURE_SWITCH == True)
#define   ACCC_u16PreHiOrLowValue				(ACCC_stRomLayout.u16PreHiOrLowValue)
#endif

#if((ACCC_nAcType == ACC_u8VariableDisplacAc) || (ACCC_nAcType == ACC_u8ElectricAc))
#define   ACCC_u16TargetEvapByDef 				(ACCC_stRomLayout.u16TargetEvapByDef)
#define   ACCC_u16TargetEvapGradientTime		(ACCC_stRomLayout.u16TargetEvapGradientTime)
#define   ACCC_u16TargetEvapGradientTemp		(ACCC_stRomLayout.u16TargetEvapGradientTemp)
#define   ACCC_u16TargetEvapByOatOffsetFresh	(ACCC_stRomLayout.u16TargetEvapByOatOffsetFresh)
#define   ACCC_u16TargetEvapByOatOffsetRec		(ACCC_stRomLayout.u16TargetEvapByOatOffsetRec)
#define   ACCC_au16TargetEvapByBlowout_X		(ACCC_stRomLayout.au16TargetEvapByBlowout_X)
#define   ACCC_au16TargetEvapByBlowout_Y		(ACCC_stRomLayout.au16TargetEvapByBlowout_Y)
#define   ACCC_u16InletTempHysForPidPara 		(ACCC_stRomLayout.u16InletTempHysForPidPara)
#define   ACCC_u16TargePhysicsIncGradient		(ACCC_stRomLayout.u16TargePhysicsIncGradient)
#define   ACCC_u16TargePhysicsDecGradient		(ACCC_stRomLayout.u16TargePhysicsDecGradient)
#define   ACCC_i16EvapTempDiffMax 				(ACCC_stRomLayout.i16EvapTempDiffMax)
#define   ACCC_i16EvapTempDiffMin				(ACCC_stRomLayout.i16EvapTempDiffMin)
#define   ACCC_u16EvapTempDiffTol          			(ACCC_stRomLayout.u16EvapTempDiffTol)
#if ACCC_nWITH_EVAP_DELAY_OFFAC
#define   ACCC_u16EvapTempFreezingTemp 		(ACCC_stRomLayout.u16EvapTempFreezingTemp )
#define   ACCC_u16EvapDelayAcOffTime			(ACCC_stRomLayout.u16EvapDelayAcOffTime)
#endif
#define   ACCC_u16CalcDynEvapTime				(ACCC_stRomLayout.u16CalcDynEvapTime)
#define   ACCC_au16KfInletTemp_X				(ACCC_stRomLayout.au16KfInletTemp_X)
#define   ACCC_au16KfTargetEvap_Y				(ACCC_stRomLayout.au16KfTargetEvap_Y)
#define   ACCC_au16Kf_Z1							(ACCC_stRomLayout.au16Kf_Z1)
#define   ACCC_au16Kf_Z2							(ACCC_stRomLayout.au16Kf_Z2)
#define   ACCC_au16Kf_Z3							(ACCC_stRomLayout.au16Kf_Z3)
#define   ACCC_au16KpInletTemp_X				(ACCC_stRomLayout.au16KpInletTemp_X)
#define   ACCC_au16KpEvapErr_Y					(ACCC_stRomLayout.au16KpEvapErr_Y)
#define   ACCC_au16Kp_Z1						(ACCC_stRomLayout.au16Kp_Z1)
#define   ACCC_au16Kp_Z2						(ACCC_stRomLayout.au16Kp_Z2)
#define   ACCC_au16Kp_Z3						(ACCC_stRomLayout.au16Kp_Z3)
#define   ACCC_au16KiDynEvap_X					(ACCC_stRomLayout.au16KiDynEvap_X)
#define   ACCC_au16KiEvapErr_Y					(ACCC_stRomLayout.au16KiEvapErr_Y)
#define   ACCC_au16Ki_Z1							(ACCC_stRomLayout.au16Ki_Z1)
#define   ACCC_au16Ki_Z2							(ACCC_stRomLayout.au16Ki_Z2)
#define   ACCC_au16Ki_Z3							(ACCC_stRomLayout.au16Ki_Z3)

#define   ACCC_u16CoolingCapacityPidCalcTime		(ACCC_stRomLayout.u16CoolingCapacityCalcTime)
#define   ACCC_u16KpBaseConst    					(ACCC_stRomLayout.u16KpBaseConst)
#define   ACCC_u16KiBaseConst    					(ACCC_stRomLayout.u16KiBaseConst)
#define   ACCC_u16KdBaseConst   					(ACCC_stRomLayout.u16KdBaseConst)
#define   ACCC_au16CoolingCapacityToPhysics_X	(ACCC_stRomLayout.au16CoolingCapacityToPhysics_X)
#define   ACCC_au16CoolingCapacityToPhysics_Y	(ACCC_stRomLayout.au16CoolingCapacityToPhysics_Y)
#define   ACCC_au16CoolingCapacityMin			ACCC_au16CoolingCapacityToPhysics_X[0]
#define   ACCC_au16CoolingCapacityMax			ACCC_au16CoolingCapacityToPhysics_X[1]
#define   ACCC_au16PhysicsMin					ACCC_au16CoolingCapacityToPhysics_Y[0]
#define   ACCC_au16PhysicsMax					ACCC_au16CoolingCapacityToPhysics_Y[1]
#endif

#if(ACCC_nAcType == ACC_u8VariableDisplacAc)	
#define   ACCC_u16VdcPwmPidCalcTime			(ACCC_stRomLayout.u16VdcPwmPidCalcTime)
#define   ACCC_i16VdcCurrDiffMax 					(ACCC_stRomLayout.i16VdcCurrDiffMax)
#define   ACCC_i16VdcCurrDiffMin					(ACCC_stRomLayout.i16VdcCurrDiffMin)
#define   ACCC_u16VdcPwmPidKp					(ACCC_stRomLayout.u16VdcPwmPidKp)
#define   ACCC_u16VdcPwmPidKi					(ACCC_stRomLayout.u16VdcPwmPidKi)
#define   ACCC_u16VdcPwmPidKd					(ACCC_stRomLayout.u16VdcPwmPidKd)
#define   ACCC_u16VdcMinPwm					(ACCC_stRomLayout.u16VdcMinPwm)
#define   ACCC_u16VdcMaxPwm					(ACCC_stRomLayout.u16VdcMaxPwm)

#if(ACCC_nUSE_SHORT_GND_PROHIBITION == True)
#define   ACCC_u16VdcShortToGndRestoreTime		(ACCC_stRomLayout.u16VdcShortToGndRestoreTime)
#define   ACCC_u16VdcShortToGndConfirmTime		(ACCC_stRomLayout.u16VdcShortToGndConfirmTime)
#define   ACCC_u16VdcShortToGndRepeat			(ACCC_stRomLayout.u16VdcShortToGndRepeat) 
#endif 

#if(ACCC_nWITH_TORQUE_OUTPUT)	
#define   ACCC_au16TorquePressure_X 			(ACCC_stRomLayout.au16TorquePressure_X)
#define   ACCC_au16TorqueEngineSpd_Y			(ACCC_stRomLayout.au16TorqueEngineSpd_Y)
#define   ACCC_au16Torque_Z						(ACCC_stRomLayout.au16Torque_Z)
#endif

#endif 

#if(ACCC_nAcType == ACC_u8ElectricAc) 
#define   ACCC_u16EcSpeedToCANFactor		(ACCC_stRomLayout.u16EcSpeedToCANFactor)
#if(ACCC_nHCU_LIMIT_EC_SPEED == True)
#define   ACCC_u16PowerLimitDisable    		(ACCC_stRomLayout.u16PowerLimitDisable)
#define   ACCC_u16HcuLimitEcSpd_X			(ACCC_stRomLayout.u16HcuLimitEcSpd_X)
#define   ACCC_u16HcuLimitEcSpd_Y			(ACCC_stRomLayout.u16HcuLimitEcSpd_Y)
#endif

#if(ACCC_nOUTPUT_SPEED_TO_POWER)
#define   ACCC_u16EcPowerToCANFactor		(ACCC_stRomLayout.u16EcPowerToCANFactor)
#define   ACCC_u16PowerReqOffset    			(ACCC_stRomLayout.u16PowerReqOffset)
#endif 
#define   ACCC_u16EcSpeedToOutput_X				(ACCC_stRomLayout.u16EcSpeedToOutput_X)
#define   ACCC_u16EcSpeedToOutput_Y				(ACCC_stRomLayout.u16EcSpeedToOutput_Y)


#if(ACCC_nWITH_BATT_MANAGE == True)
#define   ACCC_u16CoolantInOffAcOffset			(ACCC_stRomLayout.u16CoolantInOffAcOffset)
#define   ACCC_u16CoolantInOnAcOffset			(ACCC_stRomLayout.u16CoolantInOnAcOffset)
#define   ACCC_u16TargetEvapByThermoOffset		(ACCC_stRomLayout.u16TargetEvapByThermoOffset)
#define   ACCC_u16BattMinCoolingCapacity			(ACCC_stRomLayout.u16BattMinCoolingCapacity)
#define   ACCC_u16BattMaxCoolingCapacity			(ACCC_stRomLayout.u16BattMaxCoolingCapacity)
#define   ACCC_u16ThreeWayValveRatioLvl1    		(ACCC_stRomLayout.u16ThreeWayValveRatioLvl1)
#define   ACCC_u16ThreeWayValveRatioLvl2    		(ACCC_stRomLayout.u16ThreeWayValveRatioLvl2)
#define   ACCC_u16SpdDecRateInLvl2          			(ACCC_stRomLayout.u16SpdDecRateInLvl2)
#define   ACCC_u16BattTempDiffTol          			(ACCC_stRomLayout.u16BattTempDiffTol)
#define   ACCC_u16EcSpeedForBattKiTime       		(ACCC_stRomLayout.u16EcSpeedForBattKiTime)
#define   ACCC_au16BattCoolKi_X					(ACCC_stRomLayout.au16BattCoolKi_X)
#define   ACCC_au16BattCoolKi_Y					(ACCC_stRomLayout.au16BattCoolKi_Y)
#define   ACCC_au16EcBattBasedSpdByOat_X		(ACCC_stRomLayout.au16EcBattBasedSpdByOat_X)	
#define   ACCC_au16EcBattBasedSpdByOat_Y		(ACCC_stRomLayout.au16EcBattBasedSpdByOat_Y)
#endif

#if(ACCC_nWITH_COOLING_VALVE == True)
#define   ACCC_u16TXVOffDelayTimeConfig 			(ACCC_stRomLayout.u16TXVOffDelayTime)
#endif

#endif




/******************************** END *************************************/
 /*****************************************************************************
* End of check if informations are already included
******************************************************************************/
#endif                                  /* ifndef */

/*****************************************************************************
*ACCC_Cfg.h
******************************************************************************/
